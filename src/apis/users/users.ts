/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Web Practice Tech API
 * Web Practice Tech API
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  User,
  UserDetailCommentListResponseBody,
  UserListResponseBody
} from '../backend.schemas'



/**
 * hogeに管理された投稿をすべて返却する.
ドメイン知識どうのこうの、あれこれ、それそれで、使われているので、
こうこうそれそれなので、このエンドポイントを削除することは、不可能.
 * @summary すべてのユーザを返却する
 */
export const getUserList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserListResponseBody>> => {
    
    return axios.get(
      `/users`,options
    );
  }


export const getGetUserListQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getGetUserListQueryOptions = <TData = Awaited<ReturnType<typeof getUserList>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserList>>> = ({ signal }) => getUserList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserListQueryResult = NonNullable<Awaited<ReturnType<typeof getUserList>>>
export type GetUserListQueryError = AxiosError<unknown>

/**
 * @summary すべてのユーザを返却する
 */
export const useGetUserList = <TData = Awaited<ReturnType<typeof getUserList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * N/A
 * @summary 指定されたIDのユーザを取得する.
 */
export const getUserDetail = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.get(
      `/users/${userId}`,options
    );
  }


export const getGetUserDetailQueryKey = (userId: string,) => {
    return [`/users/${userId}`] as const;
    }

    
export const getGetUserDetailQueryOptions = <TData = Awaited<ReturnType<typeof getUserDetail>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDetailQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetail>>> = ({ signal }) => getUserDetail(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetail>>>
export type GetUserDetailQueryError = AxiosError<unknown>

/**
 * @summary 指定されたIDのユーザを取得する.
 */
export const useGetUserDetail = <TData = Awaited<ReturnType<typeof getUserDetail>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserDetailQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * N/A
 * @summary 指定されたIDのユーザのコメントを取得する.
 */
export const getUserDetailCommentList = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDetailCommentListResponseBody>> => {
    
    return axios.get(
      `/users/${userId}/comments`,options
    );
  }


export const getGetUserDetailCommentListQueryKey = (userId: string,) => {
    return [`/users/${userId}/comments`] as const;
    }

    
export const getGetUserDetailCommentListQueryOptions = <TData = Awaited<ReturnType<typeof getUserDetailCommentList>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailCommentList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDetailCommentListQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetailCommentList>>> = ({ signal }) => getUserDetailCommentList(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDetailCommentList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserDetailCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetailCommentList>>>
export type GetUserDetailCommentListQueryError = AxiosError<unknown>

/**
 * @summary 指定されたIDのユーザのコメントを取得する.
 */
export const useGetUserDetailCommentList = <TData = Awaited<ReturnType<typeof getUserDetailCommentList>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailCommentList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserDetailCommentListQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



