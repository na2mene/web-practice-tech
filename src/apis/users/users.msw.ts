/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Web Practice Tech API
 * Web Practice Tech API
 * OpenAPI spec version: 0.0.1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getGetUserListMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: {city: faker.helpers.arrayElement([faker.word.sample(), undefined]), geo: faker.helpers.arrayElement([{lat: faker.helpers.arrayElement([faker.word.sample(), undefined]), lon: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), street: faker.helpers.arrayElement([faker.word.sample(), undefined]), suite: faker.helpers.arrayElement([faker.word.sample(), undefined]), zipcode: faker.helpers.arrayElement([faker.word.sample(), undefined])}, company: faker.helpers.arrayElement([{bs: faker.helpers.arrayElement([faker.word.sample(), undefined]), catchPhrase: faker.helpers.arrayElement([faker.word.sample(), undefined]), name: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), phone: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.word.sample(), website: faker.helpers.arrayElement([faker.word.sample(), undefined])})))

export const getGetUserDetailMock = () => ({address: {city: faker.helpers.arrayElement([faker.word.sample(), undefined]), geo: faker.helpers.arrayElement([{lat: faker.helpers.arrayElement([faker.word.sample(), undefined]), lon: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), street: faker.helpers.arrayElement([faker.word.sample(), undefined]), suite: faker.helpers.arrayElement([faker.word.sample(), undefined]), zipcode: faker.helpers.arrayElement([faker.word.sample(), undefined])}, company: faker.helpers.arrayElement([{bs: faker.helpers.arrayElement([faker.word.sample(), undefined]), catchPhrase: faker.helpers.arrayElement([faker.word.sample(), undefined]), name: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), phone: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.word.sample(), website: faker.helpers.arrayElement([faker.word.sample(), undefined])})

export const getGetUserDetailCommentListMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.word.sample(), email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), postId: faker.number.int({min: undefined, max: undefined})})))

export const getUsersMock = () => [
http.get('*/users', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetUserListMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/users/:userId', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetUserDetailMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/users/:userId/comments', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetUserDetailCommentListMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]
