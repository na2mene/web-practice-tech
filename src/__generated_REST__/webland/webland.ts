/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Web Practice Tech API
 * Web Practice Tech API
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { GetCityListParams, GetCityListResponseBody } from '../api.schemas';

/**
 * 国土交通省が管理しているAPIから都道府県コードを渡して、
市区町村を取得する.
@see: https://www.land.mlit.go.jp/webland/api.html
 * @summary 都道府県に紐づく市区町村の取得
 */
export const getCityList = (
  params: GetCityListParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCityListResponseBody>> => {
  return axios.get(`/webland/api/CitySearch`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCityListQueryKey = (params: GetCityListParams) => {
  return [`/webland/api/CitySearch`, ...(params ? [params] : [])] as const;
};

export const getGetCityListQueryOptions = <
  TData = Awaited<ReturnType<typeof getCityList>>,
  TError = AxiosError<unknown>,
>(
  params: GetCityListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCityList>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCityListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCityList>>> = ({ signal }) =>
    getCityList(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCityList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCityListQueryResult = NonNullable<Awaited<ReturnType<typeof getCityList>>>;
export type GetCityListQueryError = AxiosError<unknown>;

/**
 * @summary 都道府県に紐づく市区町村の取得
 */
export const useGetCityList = <
  TData = Awaited<ReturnType<typeof getCityList>>,
  TError = AxiosError<unknown>,
>(
  params: GetCityListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCityList>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCityListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
