/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Web Practice Tech API
 * Web Practice Tech API
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { GetZipcodeOrList200Response, GetZipcodeOrListParams } from '../api.schemas';

/**
 * https://zipcloud.ibsnet.co.jp/api/search のAPIを使って、
都道府県と市区町村のデータを取得する
 * @summary 郵便番号から、都道府県と市区町村を返却する.
 */
export const getZipcodeOrList = (
  params: GetZipcodeOrListParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetZipcodeOrList200Response>> => {
  return axios.get(`/api/search`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetZipcodeOrListQueryKey = (params: GetZipcodeOrListParams) => {
  return [`/api/search`, ...(params ? [params] : [])] as const;
};

export const getGetZipcodeOrListQueryOptions = <
  TData = Awaited<ReturnType<typeof getZipcodeOrList>>,
  TError = AxiosError<unknown>,
>(
  params: GetZipcodeOrListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getZipcodeOrList>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetZipcodeOrListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getZipcodeOrList>>> = ({ signal }) =>
    getZipcodeOrList(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getZipcodeOrList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetZipcodeOrListQueryResult = NonNullable<Awaited<ReturnType<typeof getZipcodeOrList>>>;
export type GetZipcodeOrListQueryError = AxiosError<unknown>;

/**
 * @summary 郵便番号から、都道府県と市区町村を返却する.
 */
export const useGetZipcodeOrList = <
  TData = Awaited<ReturnType<typeof getZipcodeOrList>>,
  TError = AxiosError<unknown>,
>(
  params: GetZipcodeOrListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getZipcodeOrList>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetZipcodeOrListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
